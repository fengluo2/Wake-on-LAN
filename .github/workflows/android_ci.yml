name: Android CI

on:
  pull_request:
    branches: [ "main" ]

jobs:
  changelog:
    runs-on: ubuntu-latest

    steps:
      # Checkout 代码
      - name: Checkout code
        uses: actions/checkout@v2

      # 获取上次发布的标签（如果没有标签则 fallback 到 HEAD）
      - name: Get last release tag
        id: last_release
        run: |
          LAST_RELEASE_TAG=$(git describe --tags --abbrev=0 || echo "HEAD")
          echo "Last release tag: $LAST_RELEASE_TAG"
          echo "LAST_RELEASE_TAG=$LAST_RELEASE_TAG" >> $GITHUB_ENV

      # 获取当前标签
      - name: Get current tag
        id: current_tag
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "Current tag: $CURRENT_TAG"
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV

      # 生成更新说明并更新 CHANGELOG.md
      - name: Generate Changelog
        run: |
          # 获取从上次发布到当前标签之间的提交信息
          if [ "$LAST_RELEASE_TAG" = "HEAD" ]; then
            RELEASE_NOTES="No previous release found. Using all commits."
            RELEASE_NOTES+="\n$(git log --pretty=format:'- %s' --no-merges)"
          else
            RELEASE_NOTES=$(git log $LAST_RELEASE_TAG..$CURRENT_TAG --pretty=format:'- %s' --no-merges)
          fi
          
          # 如果没有更新内容，显示无更新
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="No new changes."
          fi

          # 更新 CHANGELOG.md
          echo "## [$CURRENT_TAG] - $(date +'%Y-%m-%d')" > CHANGELOG.md
          echo "$RELEASE_NOTES" >> CHANGELOG.md

      # 提交更新后的 CHANGELOG.md
      - name: Commit and push Changelog
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 确保推送到主分支或者指定的分支
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for release ${{ github.ref }}"
          
          # 推送到指定分支（如 `main` 或 `master`）
          git push origin HEAD:main  # 这里可以修改为目标分支名称（如 `main`）

  build:
    runs-on: ubuntu-latest
    needs: changelog

    permissions:
      contents: write  # 设置为 write，允许发布 releases

    env:
      ACTIONS_STEP_DEBUG: true

    steps:
      - uses: actions/checkout@v4
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Decode keystore file
        run: |
          echo "${{ secrets.SIGNING_KEY_P12 }}" | base64 -d > signing_key.p12
        shell: bash

      - name: Set environment variables for signing
        run: |
          echo "SIGNING_STORE_PASSWORD=${{ secrets.SIGNING_STORE_PASSWORD }}" >> $GITHUB_ENV
          echo "SIGNING_KEY_ALIAS=${{ secrets.SIGNING_KEY_ALIAS }}" >> $GITHUB_ENV

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get app info from gradle
        id: app_info
        run: |
          VERSION_NAME=$(./gradlew -q --console=plain printVersion)
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          
          APK_NAME=$(./gradlew -q --console=plain printName)
          echo "APK_NAME=$APK_NAME" >> $GITHUB_ENV
          echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT

      - name: Build with Gradle
        run: ./gradlew assembleDebug assembleRelease -Psigning.storeFile=signing_key.p12 -Psigning.storePassword=${{ secrets.SIGNING_STORE_PASSWORD }} -Psigning.keyAlias=${{ secrets.SIGNING_KEY_ALIAS }} -Psigning.v2SigningEnabled=true

      - name: Check if release APK exists
        run: |
          if [ ! -f "app/build/outputs/apk/release/${{ steps.app_info.outputs.apk_name }}_v${{ steps.app_info.outputs.version_name }}_release.apk" ]; then
            echo "Release APK not found!"
            exit 1
          fi
          if [ ! -f "app/build/outputs/apk/debug/${{ steps.app_info.outputs.apk_name }}_v${{ steps.app_info.outputs.version_name }}_debug.apk" ]; then
            echo "Debug APK not found!"
            exit 1
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.app_info.outputs.version_name }}"  # 版本号作为 tag_name
          files: |
            app/build/outputs/apk/release/${{ steps.app_info.outputs.apk_name }}_v${{ steps.app_info.outputs.version_name }}_release.apk
            app/build/outputs/apk/debug/${{ steps.app_info.outputs.apk_name }}_v${{ steps.app_info.outputs.version_name }}_debug.apk