name: Android CI

on:
  pull_request:
    branches: [ "main" ]
    types: [ closed ]

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 设置为 write，允许发布 releases

    steps:
      - uses: actions/checkout@v4
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get app info from gradle
        id: app_info
        run: |
          VERSION_NAME=$(./gradlew -q --console=plain printVersion)
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          
          APK_NAME=$(./gradlew -q --console=plain printName)
          echo "APK_NAME=$APK_NAME" >> $GITHUB_ENV
          echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT

      - name: Check release tag
        id: check_release
        run: |
          TAG_NAME="${{ steps.app_info.outputs.version_name }}"
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/v$TAG_NAME"
          
          echo "check $RELEASE_URL exist"
          
          HTTP_RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "$RELEASE_URL")
          
          echo "HTTP code：$HTTP_RESPONSE"
          
          if [ "$HTTP_RESPONSE" = "200" ]; then
            echo "release_already_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_already_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build with Gradle
        if: steps.check_release.outputs.release_already_exists == 'false'
        run: ./gradlew assembleDebug assembleRelease

      - name: Check if release APK exists
        if: steps.check_release.outputs.release_already_exists == 'false'
        run: |
          if [ ! -f "app/build/outputs/apk/release/${{ steps.app_info.outputs.apk_name }}_v${{ steps.app_info.outputs.version_name }}_release.apk" ]; then
            echo "Release APK not found!"
            exit 1
          fi
          if [ ! -f "app/build/outputs/apk/debug/${{ steps.app_info.outputs.apk_name }}_v${{ steps.app_info.outputs.version_name }}_debug.apk" ]; then
            echo "Debug APK not found!"
            exit 1
          fi

      - name: Sign Android release apk
        if: steps.check_release.outputs.release_already_exists == 'false'
        uses: ilharp/sign-android-release@v2
        id: sign_apk_release
        with:
          releaseDir: app/build/outputs/apk/release  # 生成的未签名 APK
          signingKey: ${{ secrets.SIGNING_STORE_JKS }}  # 从 GitHub Secrets 中加载 keystore 文件的 Base64 编码
          keyStorePassword: ${{ secrets.SIGNING_STORE_PASSWORD }}  # 从 GitHub Secrets 中加载 keystore 密码
          keyAlias: ${{ secrets.SIGNING_KEY_ALIAS }}  # 从 GitHub Secrets 中加载密钥别名
          keyPassword: ${{ secrets.SIGNING_KEY_PASSWD }}  # 从 GitHub Secrets 中加载密钥密码
          buildToolsVersion: 35.0.0

      - name: Sign Android debug apk
        if: steps.check_release.outputs.release_already_exists == 'false'
        uses: ilharp/sign-android-release@v2
        id: sign_apk_debug
        with:
          releaseDir: app/build/outputs/apk/debug # 生成的未签名 APK
          signingKey: ${{ secrets.SIGNING_STORE_JKS }}  # 从 GitHub Secrets 中加载 keystore 文件的 Base64 编码
          keyStorePassword: ${{ secrets.SIGNING_STORE_PASSWORD }}  # 从 GitHub Secrets 中加载 keystore 密码
          keyAlias: ${{ secrets.SIGNING_KEY_ALIAS }}  # 从 GitHub Secrets 中加载密钥别名
          keyPassword: ${{ secrets.SIGNING_KEY_PASSWD }}  # 从 GitHub Secrets 中加载密钥密码
          buildToolsVersion: 35.0.0

      - name: Read CHANGELOG.md
        if: steps.check_release.outputs.release_already_exists == 'false'
        id: changelog
        run: |
          changelog=$(cat CHANGELOG.md)
          echo "changelog=$changelog" >> $GITHUB_ENV

      - name: Copy signed apks to cus path
        if: steps.check_release.outputs.release_already_exists == 'false'
        id: finally_apk
        run: |
          mkdir -p ./apk
          cp ${{ steps.sign_apk_release.outputs.signedFile }} ./apk/${{ steps.app_info.outputs.apk_name }}_v${{ steps.app_info.outputs.version_name }}_release.apk
          cp ${{ steps.sign_apk_debug.outputs.signedFile }} ./apk/${{ steps.app_info.outputs.apk_name }}_v${{ steps.app_info.outputs.version_name }}_debug.apk
          
          echo "apk_release=./apk/${{ steps.app_info.outputs.apk_name }}_v${{ steps.app_info.outputs.version_name }}_release.apk" >> $GITHUB_OUTPUT
          echo "apk_debug=./apk/${{ steps.app_info.outputs.apk_name }}_v${{ steps.app_info.outputs.version_name }}_debug.apk" >> $GITHUB_OUTPUT
          
          echo ls ./apk

      - name: log file
        if: steps.check_release.outputs.release_already_exists == 'false'
        run: |
          echo "${{ steps.finally_apk.outputs.apk_release }}"
          echo "${{ steps.finally_apk.outputs.apk_debug }}"

      - name: Create GitHub Release
        if: steps.check_release.outputs.release_already_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.app_info.outputs.version_name }}"  # 版本号作为 tag_name
          body: ${{ env.changelog }}
          files: |
            ${{ steps.finally_apk.outputs.apk_release }}
            ${{ steps.finally_apk.outputs.apk_debug }}